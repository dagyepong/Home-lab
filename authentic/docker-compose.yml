---
version: '3.4'

services:
  demoauth-db:
    container_name: demoauth-db
    image: docker.io/library/postgres:12
    dns:
      - $DNS_SERVER
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${AUTHENTIK_PATH}/database:/var/lib/postgresql/data
    environment:
      - TZ=$TIMEZONE
      - POSTGRES_PASSWORD=$PG_PASSWORD
      - POSTGRES_USER=$PG_USER
      - POSTGRES_DB=$PG_DB
    env_file:
      - .env
    networks:
      web:

  demoauth-redis:
    image: docker.io/library/redis:alpine
    container_name: demoauth-redis
    dns:
      - $DNS_SERVER
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${AUTHENTIK_PATH}/redis:/data
    networks:
      web:

  demoauth-app:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-${AUTHENTIK_VERSION}}
    container_name: demoauth-app
    dns:
      - $DNS_SERVER
    command: server
    environment:
      TZ: "$TIMEZONE"
      AUTHENTIK_REDIS__HOST: demoauth-redis
      AUTHENTIK_POSTGRESQL__HOST: demoauth-db
      AUTHENTIK_POSTGRESQL__USER: $PG_USER
      AUTHENTIK_POSTGRESQL__NAME: $PG_DB
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASSWORD
    volumes:
      - ${AUTHENTIK_PATH}/media:/media
      - ${AUTHENTIK_PATH}/custom-templates:/templates
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.services.authentik.loadbalancer.server.port=9000
      - traefik.http.routers.authentik.rule=Host(`idp.nanoware.online`)
      - traefik.http.routers.authentik.tls.certresolver=lets-encrypt
      - traefik.http.routers.authentik.entrypoints=websecure
    networks:
      web:
      #all-net:

  demoauth-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-${AUTHENTIK_VERSION}}
    container_name: demoauth-worker
    dns:
      - $DNS_SERVER
    command: worker
    environment:
      TZ: "$TIMEZONE"
      AUTHENTIK_REDIS__HOST: demoauth-redis
      AUTHENTIK_POSTGRESQL__HOST: demoauth-db
      AUTHENTIK_POSTGRESQL__USER: $PG_USER
      AUTHENTIK_POSTGRESQL__NAME: $PG_DB
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASSWORD
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${AUTHENTIK_PATH}/media:/media
      - ${AUTHENTIK_PATH}/certs:/certs
      - ${AUTHENTIK_PATH}/custom-templates:/templates
    env_file:
      - .env
    networks:
      web:
      #all-net:

networks:
  web:
    external: true
  #all-net:
    #external: true
